<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>comment</key>
	<string>
		Written by Peter Varo (c)2015
		http://www.cutils.org
	</string>
	<key>fileTypes</key>
	<array>
		<string>c</string>
		<string>h</string>
	</array>
	<key>firstLineMatch</key>
	<string>\b(-[*]-)(Mode:)? C \1\b</string>
	<key>foldingStartMarker</key>
	<string>\.*({|\()</string>
	<key>foldingStopMarker</key>
	<string>\.*(}|\))</string>
	<key>keyEquivalent</key>
	<string>^~C</string>
	<key>name</key>
	<string>C11</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>begin</key>
			<string>//</string>
			<key>end</key>
			<string>(?&lt;!\\)\n</string>
			<key>name</key>
			<string>comment.line.double_slash.c.11</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\\s*\n</string>
					<key>name</key>
					<string>comment.line.double_slash.line_continuation.c.11</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>/\*</string>
			<key>end</key>
			<string>\*/</string>
			<key>name</key>
			<string>comment.block.slash_star.c.11</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;=\W|^)\.\d+([eE][+-]?\d+)?[fFlL]?\b</string>
			<key>name</key>
			<string>constant.numeric.float_and_double_and_long_double.decimal.pointdigit.c.11</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w)\d+\.(\d+([eE][+-]?\d+)?)?[fFlL]?(?=\W)</string>
			<key>name</key>
			<string>constant.numeric.float_and_double_and_long_double.decimal.digitpoint.c.11</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b0[xX](\h+)?\.\h*([pP][+-]?\d+)?[fFlL]?</string>
			<key>name</key>
			<string>constant.numeric.float_and_double_and_long_double.hexadecimal.pointdigit.c.11</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.)([1-9]\d*|0)([eE][+-]?\d+)?[uU]?(ll?|LL?)?\b</string>
			<key>name</key>
			<string>constant.numericic.signed_and_unsigned_and_long_and_long_long_integer.decimal.c.11</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b0[0-7]+</string>
			<key>name</key>
			<string>constant.numeric.integer.octal.c.11</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b0[xX]\h+</string>
			<key>name</key>
			<string>constant.numeric.integer.hexadecimal.c.11</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#strong_constants</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#weak_constants</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(typedef|extern|static|_Thread_local|auto|register)\b</string>
			<key>name</key>
			<string>keyword.storage.class_specifiers.c.11</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(const|restrict|volatile|_Atomic)\b</string>
			<key>name</key>
			<string>keyword.type.type_qualifiers.c.11</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(inline|(_N|n)oreturn)\b</string>
			<key>name</key>
			<string>keyword.function.function_specifiers.c.11</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(((_S|s)tatic_)?assert)\b</string>
			<key>name</key>
			<string>keyword.other.assertion.c.11</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b_Generic\b</string>
			<key>name</key>
			<string>keyword.other.generic.c.11</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(break|continue|goto|return)\b</string>
			<key>name</key>
			<string>keyword.control.jump_statements.c.11</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(do|while|for)\b</string>
			<key>name</key>
			<string>keyword.control.iteration_statements.c.11</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(switch|case|default)\b</string>
			<key>name</key>
			<string>keyword.control.switch_statements.c.11</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(if|else)\b</string>
			<key>name</key>
			<string>keyword.control.conditional_statements.c.11</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\?|:</string>
			<key>name</key>
			<string>keyword.operator.ternary.c.11</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\+\+|--|(\+|-|\*|/|%|&amp;|\^|\||&lt;&lt;|&gt;&gt;)=</string>
			<key>name</key>
			<string>keyword.operator.assignment.augmented.c.11</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(&lt;|&gt;)=?|(=|!)=</string>
			<key>name</key>
			<string>keyword.operator.comparison.c.11</string>
		</dict>
		<dict>
			<key>match</key>
			<string>&amp;&amp;|\|\||!</string>
			<key>name</key>
			<string>keyword.operator.bool.logical.c.11</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\+|-|\*|/|%|&amp;|\^|\||~|&lt;&lt;|&gt;&gt;|(size|offset)of|(_A|a)lign(as|of)</string>
			<key>name</key>
			<string>keyword.operator.arithmetic.c.11</string>
		</dict>
		<dict>
			<key>match</key>
			<string>=|\.|-&gt;</string>
			<key>name</key>
			<string>keyword.operator.value_and_annotation_assignment.c.11</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#builtin_types</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#macros</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\(\s*(\*+)\s*([a-zA-Z_]\w*)\s*\)\s*\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.pointer.c.11</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>support.function.name.c.11</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.function_pointer.c.11</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>([a-zA-Z_]\w*)\s*\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.function.name.c.11</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.function_call.c.11</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;=\.|-&gt;)\s*[a-zA-Z_]\w*</string>
			<key>name</key>
			<string>variable.language.member_access.c.11</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#string_quoted</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#generic_names</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>builtin_functions</key>
		<dict>
			<key>match</key>
			<string>is(al(num|pha)|cntrl|x?digit|graph|(low|upp)er|p(rin|unc)t|space)|to((low|upp)er)</string>
			<key>name</key>
			<string>support.function.builtin.c.11</string>
		</dict>
		<key>builtin_types</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(((char|int|void|float|double|(b|_B)ool)\s+){2,}|(_Complex(_I)?|complex|_Imaginary(_I)|imaginary)+|((un)?signed\s+)+((float|(long\s+)?double|void|(b|_B)ool)(\s+char)?\s+)+)</string>
					<key>name</key>
					<string>invalid.illegal.support.type.c.11</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(void|(b|_B)ool|(float|(long\s+)?double)(\s+(_Complex(_I)?|complex|_Imaginary(_I)|imaginary))?|((un)?signed\s+)?(char|(short|long(\s+long)?)(\s+int)?|(int)?))\b</string>
					<key>name</key>
					<string>support.type.c.11</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(FILE|va_list|lconv|once_flag|mtx_(plain|recursive|timed)|thrd_(success|nomem|timedout|busy|error)|(ptrdiff|r?size|wchar|fpos|l?l?div|char(16|32)|sig_atomic|clock|time|max_align|u?int((_(fast|least))?(8|16|32|64)|(max|ptr))|imaxdiv|fe(nv|xcept)|errno|cnd|thrd(_start)?|tss(_dtor)?|mtx)_t)\b</string>
					<key>name</key>
					<string>storage.modifier.variable.type.special.c.11</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(struct|union|enum)\b</string>
					<key>name</key>
					<string>support.type.member.c.11</string>
				</dict>
			</array>
		</dict>
		<key>constant_placeholder</key>
		<dict>
			<key>match</key>
			<string>%(((ll?|t|h)?(d|i))|(ll?|z|j|h)?u|((\.\d*)?(l|L)?f)|[%csaeEoxXpngG])</string>
			<key>name</key>
			<string>string.interpolated.placeholder.c.11</string>
		</dict>
		<key>entity_name_class</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#illegal_names</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#generic_names</string>
				</dict>
			</array>
		</dict>
		<key>escaped_characters</key>
		<dict>
			<key>match</key>
			<string>\\(x\h+|[0-7]([0-7][0-7]?)?|\n|"|\'|\?|a|b|f|n|r|t|v|\\|0)</string>
			<key>name</key>
			<string>constant.character.escaped.special.c.11</string>
		</dict>
		<key>escaped_unicode_characters</key>
		<dict>
			<key>match</key>
			<string>\\(u\h{4}|U\h{8})</string>
			<key>name</key>
			<string>constant.character.escaped.c.11</string>
		</dict>
		<key>generic_names</key>
		<dict>
			<key>match</key>
			<string>[a-zA-Z_]\w*</string>
		</dict>
		<key>illegal_names</key>
		<dict>
			<key>match</key>
			<string>\b(auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|restrict|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while|(_A|a)lign(as|of)|_Atomic|_Bool|_Generic|(_C|c)omplex(_I)?|(_I|i)maginary(_I)?|_Noreturn|((_S|s)tatic_)?assert|_Thread_local)\b</string>
			<key>name</key>
			<string>invalid.illegal_names.name.c.11</string>
		</dict>
		<key>macro_keyword</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\bdefined\b</string>
					<key>name</key>
					<string>keyword.operator.macro.conditional.c.11</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b_Pragma\b</string>
					<key>name</key>
					<string>keyword.operator.macro.pragma.c.11</string>
				</dict>
			</array>
		</dict>
		<key>macros</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>entity.other.inherited-class.include.c.11</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.include.c.11</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^\s*(#)\s*((include\s+(&lt;(.+)&gt;|"(.+)"))|line|error|pragma|(un|ifn?)def|else|endif)</string>
					<key>name</key>
					<string>entity.other.macro.keyowrds.c.11</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>^\s*(#\s*define)\s+(?=[a-zA-Z_]\w*)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.other.macro.define.c.11</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\s|$\n|\W</string>
					<key>name</key>
					<string>meta.other.macro.define.c.11</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?=[a-zA-Z_]\w*)</string>
							<key>contentName</key>
							<string>storage.modifier.variable.c.11</string>
							<key>end</key>
							<string>(?!\w)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#strong_constants</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#weak_constants</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>^\s*(#\s*(el)?if)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.other.macro.conditional.c.11</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;!\\)\n</string>
					<key>name</key>
					<string>meta.other.macro.conditional.c.11</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#macro_keyword</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#strong_constants</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#weak_constants</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>[a-zA-Z_]\w*\s*,?\s*(##)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.macro.concatanate.c.11</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\s*[a-zA-Z_]\w*(?!\s*,?\s*(##))</string>
					<key>name</key>
					<string>string.interpolated.macro.concatanate.c.11</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.operator.macro.concatanate.c.11</string>
								</dict>
							</dict>
							<key>contentName</key>
							<string>string.interpolated.macro.concatanate.c.11</string>
							<key>match</key>
							<string>\s*[a-zA-Z_]\w*\s*,?\s*(##)</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.macro.stringify.c.11</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!^)\s*(#)\s*[a-zA-Z_]\w*</string>
					<key>name</key>
					<string>string.interpolated.macro.stringify.c.11</string>
				</dict>
			</array>
		</dict>
		<key>string_patterns</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#constant_placeholder</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_characters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_unicode_characters</string>
				</dict>
			</array>
		</dict>
		<key>string_quoted</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.quoted.single.prefix.c.11</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.character.escaped.trigraph_sequences.c.11</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\b[LUu])?'(\?\?[=/()'&lt;&gt;!-])'</string>
					<key>name</key>
					<string>string.quoted.single.trigraph.c.11</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.quoted.single.prefix.c.11</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.character.escaped.special.c.11</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\b[LUu])?'(\\(x\h+|[0-7]([0-7][0-7]?)?|\n|"|\'|\?|a|b|f|n|r|t|v|\\|0))'</string>
					<key>name</key>
					<string>string.quoted.single.escaped.c.11</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.quoted.single.prefix.c.11</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.character.escaped.c.11</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\b[LUu])?'(\\(u\h{4}|U\h{8}))'</string>
					<key>name</key>
					<string>string.quoted.single.hexadecimal.c.11</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.quoted.single.prefix.c.11</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.string.quoted.single.c.11</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\b[LUu])?'(\\|'|\n)'</string>
					<key>name</key>
					<string>string.quoted.single.illegal.c.11</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.quoted.single.prefix.c.11</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.string.quoted.more.c.11</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\b[LUu])?'.(.*?)'</string>
					<key>name</key>
					<string>string.quoted.single.regular.c.11</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\b[LU]|u8?)?"</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.quoted.single.prefix.c.11</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.unclosed_string.cython</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.c.11</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#trigraph_sequences</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#string_patterns</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(\\|"|\n)</string>
							<key>name</key>
							<string>invalid.illegal.string.quoted.single.c.11</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>strong_constants</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\.\.\.</string>
					<key>name</key>
					<string>constant.other.ellipsis.c.11</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(NULL|EOF|EXIT_(FAILURE|SUCCESS)|true|false|std(in|out|err))\b</string>
					<key>name</key>
					<string>constant.language.word_like.c.11</string>
				</dict>
			</array>
		</dict>
		<key>trigraph_sequences</key>
		<dict>
			<key>match</key>
			<string>\?\?[=/()'&lt;&gt;!-]</string>
			<key>name</key>
			<string>constant.character.escaped.trigraph_sequences.c.11</string>
		</dict>
		<key>weak_constants</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b__((LIN|FIL|DAT|TIM)E|VA_ARGS|func|STDC(_(HOSTED|VERSION|ISO_10646|MB_MIGHT_NEQ_WC|UTF_(16|32)|ANALYZABLE|IEC_559(_COMPLEX_)?|(WANT_)?LIB_EXT1|NO_(ATOMICS|COMPLEX|THREADS|VLA)))?)__\b</string>
					<key>name</key>
					<string>support.variable.macro.dunder.c.11</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(NDEBUG|CHAR_BIT|CLOCKS_PER_SEC|(S?CHAR|SHRT|INT|L?LONG)_(MAX|MIN)|(U(CHAR|SHRT|INT|L?LONG)|MB_LEN)_MAX|FLT_(RADIX|ROUNDS|EVAL_METHOD)|DECIMAL_DIG|(FLT|L?DBL)_(((MANT|DECIMAL)_)?DIG|(MIN|MAX)((_(10_)?EXP))?|EPSILON|TRUE_MIN|HAS_SUBNORM)|FP_ILOGB(0|NAN)|FE_((OVER|UNDER)FLOW|IN(EXACT|VALID)|ALL_EXCEPT|DIVBYZERO|(UP|DOWN)WARD|TO(NEAREST|WARDZERO)|DFL_ENV)|LC_(ALL|COLLATE|CTYPE|MONETARY|NUMERIC|TIME)|BUFSIZ|(TMP|F(OPEN|ILENAME))_MAX|_IO(F|L|N)BF|SEEK_(CUR|END|SET)|L_tmpnam|SIG(ABRT|FPE|ILL|INT|SEGV|TERM|_(DFL|IGN|ERR))|ONCE_FLAG_INIT|TSS_DTOR_ITERATIONS)\b</string>
					<key>name</key>
					<string>support.variable.macro.constant.c.11</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.c.11</string>
	<key>uuid</key>
	<string>8F217A3C-DD44-C9F6-8883-7FF1A89624CC</string>
</dict>
</plist>
